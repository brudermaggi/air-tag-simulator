name: Security Scan Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  
  workflow_dispatch:  
permissions:
  contents: read
jobs:
  bandit:
      name: Run Bandit Security Check
      runs-on: ubuntu-latest
  
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
  
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.x'
  
        - name: Install Bandit
          run: |
            python -m pip install --upgrade pip
            pip install bandit
  
        - name:  Run Bandit with Logging
          run: |
            echo "Running Bandit static code analysis..."
            bandit -r . -x tests -f txt -ll | tee bandit-output.txt
            echo ""
            echo "----- Bandit Issues Found (if any) -----"
            cat bandit-output.txt
  
        - name:  Fail if Bandit finds issues
          run: |
            bandit -r . -x tests -f json -o bandit-result.json -ll
            issues=$(jq '.results | length' bandit-result.json)
            if [ "$issues" -gt 0 ]; then
              echo "❗ Bandit found $issues issue(s). Failing the build."
              exit 1
            else
              echo " No issues found by Bandit."
            fi

  
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Find all requirements.txt files
        id: check-requirements
        run: |
          echo "Searching for requirements.txt files in the repository..."
          REQUIREMENTS_FILES=$(find . -type f -name "requirements.txt" | tr '\n' ' ')
          if [ -z "$REQUIREMENTS_FILES" ]; then
            echo "No requirements.txt files found in the repository"
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "Found requirements.txt files: $REQUIREMENTS_FILES"
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "files=$REQUIREMENTS_FILES" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Python
        if: steps.check-requirements.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install Python dependencies from all requirements.txt
        if: steps.check-requirements.outputs.exists == 'true'
        run: |
          python -m pip install --upgrade pip
          for req_file in $(find . -type f -name "requirements.txt"); do
            echo "Installing dependencies from: $req_file"
            pip install -r "$req_file" || echo "Warning: Failed to install some dependencies from $req_file"
          done
      
      - name: Run OWASP Dependency-Check (Action)
        if: steps.check-requirements.outputs.exists == 'true'
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'unsicheres-projekt-mit-bekannt'
          format: 'ALL'
          outputDirectory: 'reports'
          scan: '.'
      
      - name: Upload Dependency-Check Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-reports
          path: reports/
          retention-days: 30
