name: Security Scan Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  
  workflow_dispatch:  

permissions:
  contents: read

jobs:
  bandit:
      name: Run Bandit Security Check
      runs-on: ubuntu-latest
  
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
  
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.x'
  
        - name: Install Bandit
          run: |
            python -m pip install --upgrade pip
            pip install bandit
  
        - name:  Run Bandit with Logging
          run: |
            echo "Running Bandit static code analysis..."
            bandit -r . -x tests -f txt -ll | tee bandit-output.txt
            echo ""
            echo "----- Bandit Issues Found (if any) -----"
            cat bandit-output.txt
  
        - name: ❌ Fail if Bandit finds issues
          run: |
            bandit -r . -x tests -f json -o bandit-result.json -ll
            issues=$(jq '.results | length' bandit-result.json)
            if [ "$issues" -gt 0 ]; then
              echo "❗ Bandit found $issues issue(s). Failing the build."
              exit 1
            else
              echo "✅ No issues found by Bandit."
            fi

  container-security-scan:
    name: Container Security Scan with Trivy
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t app-image:${{ github.sha }} .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'app-image:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Run Trivy vulnerability scanner (Table)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'app-image:${{ github.sha }}'
          format: 'table'
          output: 'trivy-results.txt'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Display Trivy results
        run: |
          echo "# Container Security Scan Results"
          cat trivy-results.txt || echo "No vulnerabilities found or scan failed"
      
      - name: Upload Trivy artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: |
            trivy-results.sarif
            trivy-results.txt
          retention-days: 30
      
      - name: Check for critical vulnerabilities
        run: |
          if [ -f trivy-results.sarif ]; then
            CRITICAL_COUNT=$(jq '[.runs[].results[] | select(.level=="error")] | length' trivy-results.sarif || echo "0")
            echo "Critical/High vulnerabilities: $CRITICAL_COUNT"
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "::warning::Found $CRITICAL_COUNT critical/high vulnerabilities in container image"
            fi
          fi
  
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install
      
      - name: Run OWASP Dependency-Check (Action)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'unsicheres-projekt-mit-bekannt'
          format: 'ALL'
          outputDirectory: 'reports'
      
      # NEU: Reports hochladen
      - name: Upload Dependency-Check Reports
        uses: actions/upload-artifact@v4
        if: always()  # Auch bei Fehlern hochladen
        with:
          name: dependency-check-reports
          path: reports/
          retention-days: 30  # Optional: wie lange aufbewahren
  

  
